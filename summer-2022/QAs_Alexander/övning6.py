"""
A certain CS professor gives 100-point exams that are grades on the scale:
90-100:A, 80-89:B, 70-79:C, 60-69:D, <60:F.
Write a program that takes the exam score as an input and uses a decision 
structure to calculate the grade 
"""

def grade(score):
    
    if score>100:
        print("enter a valid score")
    elif score>=90:
        print("A")
    elif score >= 80:
        print("B")
    elif score >= 70:
        print("C")
    elif score >= 60:
        print("D")
    elif score >= 0:
        print("F")
    else:
        print("Enter a valid score")

grade(1)
            
        
"""
The Syracuse sequence is generated by starting with a natural number x and
repeatedly applying the following function until reaching 1:
    
    if the number is even take x/2
    if the number is odd take 3*x + 1
    
For example the syracuse sequence starting from 5 is:
    5, 16, 8, 4, 2, 1

Write a program that takes in a number and computes the syracuse sequence

"""


def syracuse(x):
    print(x)
    
    while x != 1:
        
        if x % 2 == 0:
            x = x / 2
        else:
            x = 3*x + 1
        
        print(x)
        
syracuse(107)





#Övning 11 i boken
"""
Write a program that to find the sum of the first n natural numbers,
where the value of n is provided be the user
"""

#Två potentiella felkällor:
#Användaren skriver in något som inte är ett tal, eller ett negativt tal
#Detta ger två olika typer av fel, i det första fallet crashar programmet
#I det andra fallet funkar inte programmet som tänkt

def natural_sum():
    
    while True:
        #Vi tar in ett nummer från användaren
        number_input = input('Input a natural number ')
        
        #Omvandla till int
        try:
            n = int(number_input)
            if n < 0:
                print("A natural number is >0")
            else:
                break
        except ValueError:
            print("You didnt input a natural number")
        except:
            print("Something else went wrong")
            
     
    #Skapa "iterationsvariabel" i, och "summeringsvariabel" s
    i = 1
    s = 0
    
    #Loopa n ggr och summera
    while i <= n:
        s = s+i
        i = i+1
    return s

print(natural_sum())

"""
Write a function that finds all prime numbers up to a given number num
"""

n = 11

def find_primes(n):
    #Gå igenom alla nummer up till num
    for i in range(2,n):
        #Vi antar första att det är ett primtal
        delar = False
        
        #Gå nu igenom alla nummer från 0 till i
        for j in range(2, i):
            #Vi kollar om j delar i
            if (i % j) == 0:
                #Om j delar i sätter vi delar till True
                delar = True
        if delar == False:
            print(i)
    
find_primes(n)